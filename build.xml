<?xml version="1.0"?>
<project name="WombatHA" default="dist" basedir=".">
	<property name="name" value="WombatHA"/>
	<property name="version" value="0.9.0"/>

	<property name="tomcat.dir" value="/opt/tomcat/current" />

	<property name="debug" value="on"/>
	<property name="deprecation" value="off"/>
	<property name="optimize" value="off"/>

	<property name="src.dir" value="./WEB-INF/src"/>
	<property name="lib.dir" value="./WEB-INF/lib"/>
	<property name="scripts.dir" value="./scripts"/>
	<property name="docs.dir" value="./doc"/>
	<property name="build.dir" value="./build"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="javadoc.dir" value="${build.dir}/javadoc"/>
	<property name="dist.dir" value="./dist"/>
	<property name="archive.dir" value="${dist.dir}/${name}-${version}"/>
	<property name="warfile" value="${build.dir}/${name}.war" />

	<property name="classpath" value=""/>
	<selector id="archive.src.selector">
		<and>
			<or>
				<filename name="**/*.java" casesensitive="no"/>
			</or>
			<or>
				<filename name="com/**" casesensitive="no"/>
				<filename name="org/**" casesensitive="no"/>
				<filename name="ie/**" casesensitive="no" />
			</or>
		</and>
	</selector>

	<path id="base.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>

		<fileset dir="${tomcat.dir}/bin">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${tomcat.dir}/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="prepare">
		<tstamp/>
		<mkdir dir="${build.dir}"/>
	</target>

	<target name="compile" depends="prepare">
		<mkdir dir="${build.classes}"/>
		<mkdir dir="./WEB-INF/classes"/>
		<mkdir dir="./WEB-INF/classes/META-INF"/>
		
		<javac
			includeantruntime="false" 
			srcdir="${src.dir}" 
			excludes="ie/wombat/ha/ui/**"
			destdir="${build.classes}" 
			debug="${debug}" 
			deprecation="${deprecation}" 
			optimize="${optimize}"
			source="1.6"
			target="1.6">
			<classpath refid="base.classpath"/>
			<!--
			<compilerarg value="-Xlint" />
			-->
		</javac>
		
		<copy todir="${build.classes}">
			<fileset dir="${src.dir}" excludes="**/*.java,**/*.class"/>
		</copy>
		<copy file="./WEB-INF/c3p0.properties" todir="./WEB-INF/classes" />
		<copy file="./WEB-INF/log4j.properties" todir="./WEB-INF/classes" />
		<copy file="./WEB-INF/persistence.xml" todir="./WEB-INF/classes/META-INF" />

		<copy todir="./WEB-INF/classes">
			<fileset dir="${build.classes}" />
		</copy>

	</target>


	<target name="javadocs" depends="prepare">
		<mkdir dir="${javadoc.dir}"/>
		<javadoc destdir="${javadoc.dir}" use="true">
                        <classpath refid="base.classpath"/>
                        <packageset dir="${src.dir}">
                        </packageset>
		</javadoc>
	</target>

	<!-- Create WAR -->
	<target name="war" depends="compile">
		<war destfile="${warfile}" 
			webxml="./WEB-INF/web.xml">
			<lib dir="./WEB-INF/lib" />
			<classes dir="./WEB-INF/classes" />
			<fileset file="./LICENSE.txt" />
			<fileset dir="." includes="jsp/**"/>
			<fileset dir="." includes="templates/**"/>
		</war>
	</target>

	<target name="dist" depends="war">
		<mkdir dir="${archive.dir}"/>

		<copy todir="${archive.dir}">
			<fileset file="./LICENSE.txt" />
			<fileset file="./ChangeLog.txt" />
			<fileset file="${warfile}" />
		</copy>

		<!--
		<mkdir dir="${archive.dir}/doc" />
		<copy todir="${archive.dir}/doc">
			<fileset dir="${docs.dir}" />
		</copy>
		-->
		<!--
		<mkdir dir="${archive.dir}/src"/>
		<copy todir="${archive.dir}/src">
			<fileset dir="${src.dir}">
				<selector refid="archive.src.selector"/>
			</fileset>
		</copy>
		-->
	</target>

	<target name="src-dist" depends="clean">
		<tar destfile="../${name}-${version}-src.tar.gz"
			compression="gzip"
		>
			<tarfileset
				dir="."
				prefix="${name}-${version}"
				excludes="**/CVS"
			/>
		</tar>
	</target>	

	<target name="bin-dist" depends="dist">
		<tar destfile="../${name}-${version}-bin.tar.gz"
			basedir="${dist.dir}" 
			includes="${name}-${version}/**"
			compression="gzip"
		/>
	
	</target>


	<target name="clean">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="./work" />
	</target>
</project>
